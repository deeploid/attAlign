# -*- coding: utf-8 -*-

from __future__ import division, print_function

"""
To train a Feature-based Attention Aligner (FAA)

Input JSON files should be generated by the script `tokenize-corpus.py`.

"""

import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F

# Reading Arguments
parser = argparse.ArgumentParser(description='Feature-based Attention Network')
parser.add_argument('--data', type=str, default='/data',
                help='location of the data corpus')

class FAA(nn.Module):
    def __init__(self):
        super(FAA, self).__init__()
        self.layer1 = nn.Linear(300,200)

    def forward(self,x):
        x = F.relu(self.layer1(x))
        return x

    def num_flat_features(self,x):
        size = x.size()[1:] # all dimensions except the batch dimension
        num_features = 1
        for s in size:
            num_features *= s
        return num_features
    
net = FAA()
net
      



